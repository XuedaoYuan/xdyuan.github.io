(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{560:function(t,v,_){"use strict";_.r(v);var i=_(58),e=Object(i.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git学习"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git学习"}},[t._v("#")]),t._v(" Git学习")]),t._v(" "),_("h3",{attrs:{id:"设定默认推送分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设定默认推送分支"}},[t._v("#")]),t._v(" 设定默认推送分支")]),t._v(" "),_("p",[t._v("git branch --set-upstream-to=origin/dev")]),t._v(" "),_("p",[t._v("现在随便修改一下工程文件的内容,然后git commit ,git push,之后就可以直接提交到远程的dev分支中,而不会是master")]),t._v(" "),_("p",[t._v("git branch --unset-upstream master")]),t._v(" "),_("p",[t._v("git branch -m main")]),t._v(" "),_("h3",{attrs:{id:"git-add"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),_("p",[t._v("git add 添加新的文件到版本库")]),t._v(" "),_("p",[t._v("git add -u 仅监控已经被"),_("strong",[t._v("add")]),t._v("的文件（即tracked file） 不会提交新文件")]),t._v(" "),_("p",[t._v("git commit 提交修改")]),t._v(" "),_("p",[t._v("git status 查看版本库的状态")]),t._v(" "),_("p",[t._v("git diff 查看文件修改前后的区别")]),t._v(" "),_("p",[t._v("git log --pretty=oneline 查看提交日志")]),t._v(" "),_("p",[t._v("git log --pretty=format:%s 查看格式化的commit日志")]),t._v(" "),_("p",[t._v("git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况")]),t._v(" "),_("p",[t._v("git branch -u origin/dev 当前分支与远程分支关联")]),t._v(" "),_("p",[t._v("git reset --hard HEAD^ 回退到上一个版本 ， HEAD^^表示前2个版本，前100个版本可以写成HEAD~100")]),t._v(" "),_("p",[t._v("git reset — hard commit_id 可以回到对应提交id的版本")]),t._v(" "),_("p",[t._v("Reset 之后往往本地的版本会落后远端的版本， 这时候如果需要推送就得借助"),_("strong",[t._v("git push -f")]),t._v("  也就是fast-forwards 强制合并")]),t._v(" "),_("p",[t._v("git reflog 查看命令历史，")]),t._v(" "),_("p",[t._v("git checkout -- "),_("code",[t._v("<file>")]),t._v(" 撤销修改， 回到上一次add或者commit时的状态")]),t._v(" "),_("p",[t._v("git checkout -b dev origin/dev 基于远程dev分支创建本地dev分支")]),t._v(" "),_("p",[t._v("git reset HEAD "),_("code",[t._v("<file>")]),t._v("撤销暂存区的修改， 回到add之前，")]),t._v(" "),_("p",[t._v("工作区： 当前工作的文件夹 working directionary")]),t._v(" "),_("p",[t._v("暂存区： add之后添加到的地方")]),t._v(" "),_("p",[t._v("git rm test.txt 删除文件， 之后可以直接commit提交删除操作")]),t._v(" "),_("p",[t._v("不小心从本地删除文件 git checkout -- file_name 可以重新恢复")]),t._v(" "),_("p",[t._v("git remote add origin git@github.com:XuedaoYuan/learngit.git 本地仓库和远程库关联")]),t._v(" "),_("p",[_("strong",[t._v("git push -u origin master")]),t._v(" 推送本地仓库到远程库，")]),t._v(" "),_("p",[t._v("把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。")]),t._v(" "),_("p",[t._v("由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。")]),t._v(" "),_("p",[t._v("以后做了修改就可以 git push origin master 把本地master分支的最新修改推送到origin远程仓库")]),t._v(" "),_("p",[t._v("git remote remove origin 取消关联远程仓库")]),t._v(" "),_("p",[t._v("git remote -v  查看自己的权限")]),t._v(" "),_("p",[t._v("git branch -a 查看所有分支")]),t._v(" "),_("p",[t._v("git branch dev 创建dev分支")]),t._v(" "),_("p",[t._v("git checkout dev 切换为dev分支")]),t._v(" "),_("p",[t._v("git branch 查看当前分支和其余分支")]),t._v(" "),_("p",[t._v("git branch -d dev 删除dev分支")]),t._v(" "),_("p",[t._v("git merge dev 合并指定分支（dev） 到当前分支， 使用fast forward模式")]),t._v(" "),_("p",[t._v("git branch -a 查看所有分支")]),t._v(" "),_("p",[t._v('git merge --no-ff -m "merge with no-ff" dev 不适用fast forward模式合并分支， 此种方法会保留分支记录')]),t._v(" "),_("p",[t._v("git stash 存储工作现场， 等以后恢复现场后继续工作： 这个主要用于当有临时bug需要修复，但是当前工作未完成， 需要先修bug， 但是不提交")]),t._v(" "),_("p",[t._v("git stash list 存储列表")]),t._v(" "),_("p",[t._v("git stash pop 恢复工作现场")]),t._v(" "),_("p",[t._v("git branch -D feature-vulcan   feature-vulcan分支如果还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。")]),t._v(" "),_("p",[_("code",[t._v("git tag <tagname>")]),t._v(" 创建一个标签， 默认是当前最新的commit，一般\n"),_("code",[t._v("git tag <tagname> <commit-id>")]),t._v(" 也可以指定一个以前的commit 打tag")]),t._v(" "),_("p",[_("code",[t._v("git tag -a <tagname> -m “desc”")]),t._v(" 可以给这个标签加说明文字")]),t._v(" "),_("p",[t._v("git tag 查看所有的标签")]),t._v(" "),_("p",[_("code",[t._v("git show <tagname>")]),t._v(" 可以查看这个标签的详情")]),t._v(" "),_("p",[_("code",[t._v("git tag -d <tagname>")]),t._v("删除标签")]),t._v(" "),_("p",[_("code",[t._v("git push origin <tagname>")]),t._v(" 推送标签到远程")]),t._v(" "),_("p",[t._v("git push origin —tags 推送所有的标签到远程")]),t._v(" "),_("p",[_("strong",[t._v("refusing to merge unrelated histories")])]),t._v(" "),_("p",[t._v("git pull origin master --allow-unrelated-histories")]),t._v(" "),_("p",[t._v("给分支添加备注")]),t._v(" "),_("p",[t._v("npm i -g git-br")]),t._v(" "),_("p",[t._v("git config branch.分支名称.description 杭州安全通开发分支")]),t._v(" "),_("p",[t._v("Git br 查看分支描述")]),t._v(" "),_("p",[t._v("设定默认push分支")]),t._v(" "),_("p",[t._v("git push --set-upstream origin master")]),t._v(" "),_("p",[t._v("git push -u origin master 和上面的一样效果")]),t._v(" "),_("p",[t._v('git config --global user.name "bryan sun"')]),t._v(" "),_("p",[t._v('git config --global user.email "hitsjt@gmail.com"')]),t._v(" "),_("p",[t._v("git config -l 查看配置项")]),t._v(" "),_("p",[_("strong",[t._v("git revert")]),t._v(" 用于反做某一个版本， 比如"),_("strong",[t._v("commit")]),t._v(" 了 三次， 但是第二次不想要了， 但是保留第三次的提交。 就需要用到"),_("strong",[t._v("revert")])]),t._v(" "),_("p",[t._v("git revert -n commit_id 反做这个id的commit。可能会出现冲突 需要手动解决，然后重新commit 一次即可。 注意此时的commit message 最好写成如下格式")]),t._v(" "),_("p",[t._v('Revert "feat(txt): add txt"')]),t._v(" "),_("p",[t._v("This reverts commit 6788a3c72b6bae5a9780503ea69681da18f44c3e.")]),t._v(" "),_("p",[_("strong",[t._v("git rebase")])]),t._v(" "),_("p",[t._v("Rebase 可以对某一段线性提交历史进行编辑、删除、复制、粘贴， 合理使用rebase可以使得我们的提交历史干净简洁")]),t._v(" "),_("p",[t._v("1、合并多个commit为一个完整的commit")]),t._v(" "),_("p",[t._v("​\tgit rebase -i ( startpoint endpoint ] 前开后闭")]),t._v(" "),_("p",[t._v("​\tgit rebase -i HEAD~2 2表示要合并的数量")]),t._v(" "),_("p",[t._v("弹出之后的")]),t._v(" "),_("p",[t._v("2、将某一段commit粘贴到另一个分支上")]),t._v(" "),_("p",[t._v("​\tgit rebase -i ( startpoint endpoint ] —onto [branchName]")]),t._v(" "),_("p",[t._v("​\t--onto的意思是要将该指定的提交复制到哪个分支上, 此时的HEAD 是有问题的， 一般需要")]),t._v(" "),_("p",[t._v("​\tgit checkout branchName")]),t._v(" "),_("p",[t._v("​\tgit reset --hard last_commit")])])}),[],!1,null,null,null);v.default=e.exports}}]);